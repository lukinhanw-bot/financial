const Transaction = require('./server/models/Transaction');

async function testRecurringFix() {
  console.log('üß™ Testando corre√ß√£o de duplica√ß√£o de transa√ß√µes recorrentes...\n');
  
  try {
    // Limpar transa√ß√µes existentes de teste
    console.log('üßπ Limpando transa√ß√µes de teste anteriores...');
    const existingTransactions = await Transaction.findAll('test-user');
    for (const transaction of existingTransactions) {
      if (transaction.description.includes('teste final')) {
        if (transaction.is_recurring) {
          await Transaction.deleteRecurring(transaction.id, 'test-user');
        } else {
          await Transaction.delete(transaction.id, 'test-user');
        }
      }
    }
    
    // Criar transa√ß√£o recorrente de teste
    console.log('üìù Criando transa√ß√£o recorrente de teste...');
    const testTransaction = new Transaction({
      user_id: 'test-user',
      type: 'expense',
      amount: 100.00,
      description: 'teste final',
      category: 'Teste',
      date: '2024-01-15',
      is_recurring: true,
      recurring_type: 'monthly',
      recurring_interval: 1,
      recurring_end_date: '2024-05-15'
    });
    
    // Gerar inst√¢ncias
    console.log('üîÑ Gerando inst√¢ncias recorrentes...');
    const generatedTransactions = await Transaction.generateAllRecurringInstances(testTransaction, new Date(), 'test-user');
    
    console.log(`‚úÖ Geradas ${generatedTransactions.length} transa√ß√µes`);
    
    // Verificar resultados
    console.log('\nüìä Verificando transa√ß√µes geradas:');
    const allTransactions = await Transaction.findAll('test-user');
    const testTransactions = allTransactions.filter(t => t.description.includes('teste final'));
    
    console.log(`\nTotal de transa√ß√µes encontradas: ${testTransactions.length}`);
    
    testTransactions.forEach((transaction, index) => {
      console.log(`${index + 1}. ${transaction.description} - ${transaction.date} - is_recurring: ${transaction.is_recurring}`);
    });
    
    // Verificar se n√£o h√° duplica√ß√£o
    const originalCount = testTransactions.filter(t => t.description === 'teste final').length;
    const numberedCount = testTransactions.filter(t => t.description.includes('teste final') && t.description.includes('/')).length;
    
    console.log(`\nüîç An√°lise:`);
    console.log(`- Transa√ß√µes originais (sem numera√ß√£o): ${originalCount}`);
    console.log(`- Transa√ß√µes numeradas: ${numberedCount}`);
    
    if (originalCount === 0 && numberedCount === 5) {
      console.log('‚úÖ SUCESSO: N√£o h√° duplica√ß√£o! Apenas as 5 inst√¢ncias numeradas foram criadas.');
    } else if (originalCount > 0) {
      console.log('‚ùå ERRO: Ainda h√° transa√ß√µes originais duplicadas!');
    } else {
      console.log('‚ö†Ô∏è  AVISO: N√∫mero de transa√ß√µes n√£o esperado.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar teste
testRecurringFix();
